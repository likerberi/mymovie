중복되는 프로바이더를 선언할 수 있습니다.
굳이 중복시켜서 사용할 일은 많지는 않겠지만요.

그리고 사용을 위해서는 메인 함수에서 프로바이더 스코프로 감싸줘야 합니다.

이처럼 프로바이더를 사용한다는 것은,
생성과 같은 선언, 그리고 사용 예약, 그리고 dispose와 같은 사이클을 순환합니다.
autoDispose, 그리고 family등으로 부가 기능을 설정할 수 있으며
한꺼번에 선언하는 것도 가능합니다.

.프로바이더 읽기.

모든 프로바이더는 ref,즉 레퍼런스를 매개변수로 가져옵니다.
ref의 . 연산자를 통해서 watch, read 등의 메소드로 프로바이더를 읽어옵니다.

그리고 state_notifier를 통해서 사용하기도 합니다.
보통은, 위젯에서 프로바이더를 사용하게 되는데 
이 때 state_less_widget 대신 consumer_widget의 빌드 메서드에서
Widget_ref를 통해서 접근할 수 있습니다.
말 그대로 상태/값을 읽는다, 소비한다라는 측면이죠. 

만약 stateful이라면 ConsumerStatefulWidget, ConsumerState을 extends합니다.
여기의 stateful에서는 빌드에 앞서 initState에서 ref를 불러옵니다.
